# --- CH·ª®C NƒÇNG 6: KHUNG CHAT T∆Ø∆†NG T√ÅC V·ªöI GEMINI ---
st.markdown("---")
st.subheader("üí¨ Tr√≤ chuy·ªán tr·ª±c ti·∫øp v·ªõi Gemini AI")

api_key = st.secrets.get("GEMINI_API_KEY")

if api_key:
    # T·∫°o client Gemini
    client = genai.Client(api_key=api_key)
    model_name = "gemini-2.5-flash"

    # L∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ h·ªôi tho·∫°i
    for message in st.session_state.chat_history:
        if message["role"] == "user":
            with st.chat_message("user"):
                st.markdown(message["content"])
        else:
            with st.chat_message("assistant"):
                st.markdown(message["content"])

    # √î nh·∫≠p chat
    user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi ho·∫∑c y√™u c·∫ßu c·ªßa b·∫°n...")

    if user_input:
        # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
        st.chat_message("user").markdown(user_input)
        st.session_state.chat_history.append({"role": "user", "content": user_input})

        # G·ª≠i t·ªõi Gemini
        with st.chat_message("assistant"):
            with st.spinner("Gemini ƒëang suy nghƒ©..."):
                try:
                    response = client.models.generate_content(
                        model=model_name,
                        contents=user_input
                    )
                    reply = response.text
                except Exception as e:
                    reply = f"‚ùå L·ªói khi g·ªçi API Gemini: {e}"

                st.markdown(reply)
                st.session_state.chat_history.append({"role": "assistant", "content": reply})
else:
    st.warning("‚ö†Ô∏è Ch∆∞a thi·∫øt l·∫≠p GEMINI_API_KEY trong Secrets. Vui l√≤ng c·∫•u h√¨nh tr∆∞·ªõc khi d√πng Chat.")
